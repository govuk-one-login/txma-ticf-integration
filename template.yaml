AWSTemplateFormatVersion: '2010-09-09'
Description: Integrate TxMA service with Zendesk in order to automate Athena queries
Transform: AWS::Serverless-2016-10-31

Parameters:
  CodeSigningConfigArn:
    Description: The ARN of the Code Signing Config to use, provided by the deployment pipeline
    Type: String
    Default: none
  Environment:
    Description: The environment type
    Type: String
    AllowedValues:
      - dev
      - build
      - staging
      - integration
      - production
  PermissionsBoundary:
    Description: The ARN of the permissions boundary to apply to any role created by the template
    Type: String
    Default: none
  TestRoleArn:
    Type: String
    Description: The ARN of the role that will used for integration tests
    Default: none

Conditions:
  ApiCustomDomain: !Not [!Equals [!Ref Environment, dev]]
  CslsEgress:
    !Or [
      !Equals [!Ref Environment, production],
      !Equals [!Ref Environment, integration],
      !Equals [!Ref Environment, staging]
    ]
  DevEnvironment: !Equals [!Ref Environment, dev]
  TestEnvironment:
    !Not [
      !Or [
        !Equals [!Ref Environment, production],
        !Equals [!Ref Environment, integration]
      ]
    ]
  TestRoleResources:
    !And [Condition: TestEnvironment, !Not [!Equals [!Ref TestRoleArn, none]]]
  UseCodeSigning: !Not [!Equals [!Ref CodeSigningConfigArn, none]]
  UsePermissionsBoundary: !Not [!Equals [!Ref PermissionsBoundary, none]]

Globals:
  Function:
    CodeSigningConfigArn:
      !If [UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue]
    CodeUri: dist/
    Environment:
      Variables:
        NODE_OPTIONS: --enable-source-maps
    PermissionsBoundary:
      !If [UsePermissionsBoundary, !Ref PermissionsBoundary, !Ref AWS::NoValue]
    ReservedConcurrentExecutions: 10
    Runtime: nodejs18.x
    Timeout: 30
  Api:
    OpenApiVersion: 3.0.1

Resources:
  ###############
  # API Resources
  ###############

  ZendeskWebhookApi:
    #checkov:skip=CKV_AWS_120:We explicitly don't want caching because we want the lambda to fire off every time a Zendesk ticket is approved
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt ZendeskWebhookAccessLogGroup.Arn
        Format: >-
          {
          "requestId": "$context.requestId",
          "ip": "$context.identity.sourceIp",
          "requestTime": "$context.requestTime",
          "httpMethod": "$context.httpMethod",
          "path": "$context.path",
          "routeKey": "$context.routeKey",
          "status": "$context.status",
          "protocol": "$context.protocol",
          "responseLatency": "$context.responseLatency",
          "responseLength": "$context.responseLength"
          }
      Description: API called by Zendesk webhooks to begin automated Athena queries
      DisableExecuteApiEndpoint: !If [ApiCustomDomain, true, false]
      EndpointConfiguration:
        Type: REGIONAL
      Name: !Sub ${AWS::StackName}-zendesk-webhook-api
      TracingEnabled: true
      StageName: !Ref Environment

  ZendeskWebhookApiBasePathMapping:
    Condition: ApiCustomDomain
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: '{{resolve:ssm:ZendeskWebhookApiDomainName}}'
      RestApiId: !Ref ZendeskWebhookApi
      Stage: !Ref ZendeskWebhookApi.Stage

  ZendeskWebhookAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: '{{resolve:ssm:LogsKmsKeyArn}}'
      LogGroupName: !Sub /aws/apigateway/${AWS::StackName}-zendesk-webhook-api-access-logs
      RetentionInDays: 30

  ZendeskWebhookAccessCslsSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: CslsEgress
    Properties:
      LogGroupName: !Ref ZendeskWebhookAccessLogGroup
      FilterPattern: ''
      DestinationArn: '{{resolve:ssm:CSLSLogsDestination}}'

  ZendeskWebhookApiWafAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    Properties:
      ResourceArn: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}::/restapis/${ZendeskWebhookApi}/stages/${ZendeskWebhookApi.Stage}
      WebACLArn: '{{resolve:ssm:ZendeskWebhookApiWafAclArn}}'

  ##################
  # Lambda Resources
  ##################

  InitiateDataRequestFunction:
    #checkov:skip=CKV_AWS_115:Defined in Globals section
    #checkov:skip=CKV_AWS_116:Lambda is behind an API gateway, so repeated processing of the same message isn't a problem
    #checkov:skip=CKV_AWS_117:VPC not required
    Type: AWS::Serverless::Function
    Properties:
      Handler: initiateDataRequest.handler
      Environment:
        Variables:
          AUDIT_DATA_REQUEST_EVENTS_QUEUE_URL: '{{resolve:ssm:AuditDataRequestEventsQueueUrl}}'
          INITIATE_DATA_REQUEST_QUEUE_URL: !Ref InitiateDataRequestQueue
          VALID_EMAIL_RECIPIENTS_BUCKET: '{{resolve:ssm:ValidEmailRecipientsBucketName}}'
          ZENDESK_API_SECRETS_ARN: '{{resolve:ssm:ZendeskSecretSetArn}}'
          ZENDESK_FIELD_ID_DATA_PATHS: '{{resolve:ssm:ZendeskFieldIdDataPaths}}'
          ZENDESK_FIELD_ID_DATE_FROM: '{{resolve:ssm:ZendeskFieldIdDateFrom}}'
          ZENDESK_FIELD_ID_DATE_TO: '{{resolve:ssm:ZendeskFieldIdDateTo}}'
          ZENDESK_FIELD_ID_DATES: '{{resolve:ssm:ZendeskFieldIdDates}}'
          ZENDESK_FIELD_ID_EVENT_IDS: '{{resolve:ssm:ZendeskFieldIdEventIds}}'
          ZENDESK_FIELD_ID_IDENTIFIER_TYPE: '{{resolve:ssm:ZendeskFieldIdIdentifierType}}'
          ZENDESK_FIELD_ID_JOURNEY_IDS: '{{resolve:ssm:ZendeskFieldIdJourneyIds}}'
          ZENDESK_FIELD_ID_PII_TYPES: '{{resolve:ssm:ZendeskFieldIdPiiTypes}}'
          ZENDESK_FIELD_ID_RECIPIENT_EMAIL: '{{resolve:ssm:ZendeskFieldIdRecipientEmail}}'
          ZENDESK_FIELD_ID_RECIPIENT_NAME: '{{resolve:ssm:ZendeskFieldIdRecipientName}}'
          ZENDESK_FIELD_ID_SESSION_IDS: '{{resolve:ssm:ZendeskFieldIdSessionIds}}'
          ZENDESK_FIELD_ID_USER_IDS: '{{resolve:ssm:ZendeskFieldIdUserIds}}'
      Events:
        Api:
          Type: Api
          Properties:
            Path: /zendesk-webhook
            Method: POST
            RestApiId: !Ref ZendeskWebhookApi
      FunctionName: !Sub ${AWS::StackName}-initiate-data-request
      KmsKeyArn: '{{resolve:ssm:LambdaKmsKeyArn}}'
      Policies:
        - Statement:
            - Sid: Logs
              Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !GetAtt InitiateDataRequestLogs.Arn
            - Sid: ReadSecrets
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: '{{resolve:ssm:ZendeskSecretSetArn}}'
            - Sid: DecryptSecrets
              Effect: Allow
              Action:
                - kms:Decrypt
              Resource: '{{resolve:ssm:SecretsKmsKeyArn}}'
            - Sid: AllowSqsSend
              Effect: Allow
              Action:
                - sqs:SendMessage
              Resource:
                - !GetAtt InitiateDataRequestQueue.Arn
                - '{{resolve:ssm:AuditDataRequestEventsQueueArn}}'
            - Sid: UseSqsKmsKey
              Effect: Allow
              Action:
                - kms:Decrypt
                - kms:GenerateDataKey*
                - kms:ReEncrypt*
              Resource:
                - '{{resolve:ssm:SqsKmsKeyArn}}'
                - '{{resolve:ssm:AuditDataRequestEventsQueueKmsKeyArn}}'
            - Sid: S3ReadEmailRecipients
              Effect: Allow
              Action:
                - s3:GetObject
              Resource:
                - '{{resolve:ssm:ValidEmailRecipientsBucketArn}}/*'

  InitiateDataRequestLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: '{{resolve:ssm:LogsKmsKeyArn}}'
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-initiate-data-request'
      RetentionInDays: 30

  InitiateDataRequestCslsSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: CslsEgress
    Properties:
      LogGroupName: !Ref InitiateDataRequestLogs
      FilterPattern: ''
      DestinationArn: '{{resolve:ssm:CSLSLogsDestination}}'

  ProcessDataRequestFunction:
    #checkov:skip=CKV_AWS_115:Defined in Globals section
    #checkov:skip=CKV_AWS_117:VPC not required
    Type: AWS::Serverless::Function
    Properties:
      Handler: processDataRequest.handler
      Environment:
        Variables:
          AWS_ACCOUNT_ID: !Ref AWS::AccountId
          AUDIT_BUCKET_NAME: '{{resolve:ssm:MessageBatchBucketTXMA2Name}}'
          PERMANENT_AUDIT_BUCKET_NAME: !Sub audit-${Environment}-permanent-message-batch
          ANALYSIS_BUCKET_ARN: !GetAtt AnalysisBucket.Arn
          ANALYSIS_BUCKET_NAME: !Ref AnalysisBucket
          BATCH_JOB_MANIFEST_BUCKET_ARN: '{{resolve:ssm:BatchJobManifestBucketArn}}'
          BATCH_JOB_MANIFEST_BUCKET_NAME: '{{resolve:ssm:BatchJobManifestBucketName}}'
          BATCH_JOB_ROLE_ARN: !GetAtt BatchJobsRole.Arn
          INITIATE_ATHENA_QUERY_QUEUE_URL: !Ref InitiateAthenaQueryQueue
          INITIATE_DATA_REQUEST_QUEUE_URL: !Ref InitiateDataRequestQueue
          QUERY_REQUEST_DYNAMODB_TABLE_NAME: '{{resolve:ssm:QueryRequestTableName}}'
          TERMINATED_JOB_QUEUE_URL: !Ref TerminatedJobQueue
          ZENDESK_API_SECRETS_ARN: '{{resolve:ssm:ZendeskSecretSetArn}}'
          DATABASE_TTL_HOURS: '{{resolve:ssm:DatabaseTtlHours}}'
          DECRYPTION_LAMBDA_ARN: !GetAtt DecryptAndCopyFunction.Arn
          FEATURE_DECRYPT_DATA: false
      Events:
        InitiateDataRequestEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt InitiateDataRequestQueue.Arn
            BatchSize: 1
      FunctionName: !Sub ${AWS::StackName}-process-data
      KmsKeyArn: '{{resolve:ssm:LambdaKmsKeyArn}}'
      Policies:
        - Statement:
            - Sid: S3Read
              Effect: Allow
              Action:
                - s3:ListBucket
              Resource:
                - !GetAtt AnalysisBucket.Arn
                - '{{resolve:ssm:MessageBatchBucketTXMA2ARN}}'
            - Sid: ManifestBucketWrite
              Effect: Allow
              Action:
                - s3:PutObject
              Resource: '{{resolve:ssm:BatchJobManifestBucketArn}}/*'
            - Sid: AllowCreateS3BatchJobs
              Effect: Allow
              Action:
                - s3:CreateJob
              Resource: '*'
            - Sid: AssumeBatchJobRole
              Effect: Allow
              Action:
                - iam:PassRole
              Resource: !GetAtt BatchJobsRole.Arn
            - Sid: Logs
              Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !GetAtt ProcessDataRequestLogs.Arn
            - Sid: ReadSecrets
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: '{{resolve:ssm:ZendeskSecretSetArn}}'
            - Sid: DecryptKmsKeys
              Effect: Allow
              Action:
                - kms:Decrypt
              Resource:
                - '{{resolve:ssm:SecretsKmsKeyArn}}'
                - '{{resolve:ssm:DatabaseKmsKeyArn}}'
            - Sid: QueryRequestTableReadWrite
              Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
              Resource: '{{resolve:ssm:QueryRequestTableArn}}'
            - Sid: AllowSqsSend
              Effect: Allow
              Action:
                - sqs:SendMessage
              Resource:
                - !GetAtt InitiateAthenaQueryQueue.Arn
                - !GetAtt InitiateDataRequestQueue.Arn
                - !GetAtt TerminatedJobQueue.Arn
            - Sid: UseSqsKmsKey
              Effect: Allow
              Action:
                - kms:Decrypt
                - kms:GenerateDataKey*
                - kms:ReEncrypt*
              Resource: '{{resolve:ssm:SqsKmsKeyArn}}'
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt InitiateDataRequestDeadLetterQueue.Arn

  ProcessDataRequestLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: '{{resolve:ssm:LogsKmsKeyArn}}'
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-process-data'
      RetentionInDays: 30

  ProcessDataRequestCslsSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: CslsEgress
    Properties:
      LogGroupName: !Ref ProcessDataRequestLogs
      FilterPattern: ''
      DestinationArn: '{{resolve:ssm:CSLSLogsDestination}}'

  DecryptAndCopyFunction:
    #checkov:skip=CKV_AWS_115:Defined in Globals section
    #checkov:skip=CKV_AWS_116:Not triggered by SQS
    #checkov:skip=CKV_AWS_117:VPC not required
    Type: AWS::Serverless::Function
    Properties:
      Handler: decryptAndCopy.handler
      MemorySize: 1536
      Environment:
        Variables:
          GENERATOR_KEY_ID: '{{resolve:ssm:EncryptionGeneratorKmsKeyArn}}'
          ANALYSIS_BUCKET_NAME: !Ref AnalysisBucket
      FunctionName: !Sub ${AWS::StackName}-decrypt-and-copy
      KmsKeyArn: '{{resolve:ssm:LambdaKmsKeyArn}}'
      Policies:
        - Statement:
            - Sid: ReadFromPermanentBucket
              Effect: Allow
              Action:
                - s3:ListBucket
                - s3:GetObject
              Resource:
                - !Sub arn:aws:s3:::audit-${Environment}-permanent-message-batch
                - !Sub arn:aws:s3:::audit-${Environment}-permanent-message-batch/*
            - Sid: WriteToAnalysisBucket
              Effect: Allow
              Action:
                - s3:GetBucketLocation
                - s3:GetObject
                - s3:ListBucket
                - s3:ListBucketMultipartUploads
                - s3:ListMultipartUploadParts
                - s3:AbortMultipartUpload
                - s3:PutObject
              Resource:
                - !GetAtt AnalysisBucket.Arn
                - !Sub ${AnalysisBucket.Arn}/*
            - Sid: Logs
              Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !GetAtt DecryptAndCopyLogs.Arn
            - Sid: UseGeneratorKmsKey
              Effect: Allow
              Action:
                - kms:Decrypt
                - kms:GenerateDataKey*
                - kms:ReEncrypt*
              Resource: '{{resolve:ssm:EncryptionGeneratorKmsKeyArn}}'

  DecryptAndCopyLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: '{{resolve:ssm:LogsKmsKeyArn}}'
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-decrypt-and-copy'
      RetentionInDays: 30

  InitiateAthenaQueryFunction:
    #checkov:skip=CKV_AWS_115:Defined in Globals section
    #checkov:skip=CKV_AWS_117:VPC not required
    Type: AWS::Serverless::Function
    Properties:
      Handler: initiateAthenaQuery.handler
      Environment:
        Variables:
          ATHENA_DATABASE_NAME: '{{resolve:ssm:AuditDataAnalysisGlueDatabaseName}}'
          ATHENA_TABLE_NAME: !Ref AuditAnalysisTable
          ATHENA_WORKGROUP_NAME: '{{resolve:ssm:TicfAutomatedDataQueriesWorkgroupName}}'
          QUERY_REQUEST_DYNAMODB_TABLE_NAME: '{{resolve:ssm:QueryRequestTableName}}'
          ZENDESK_API_SECRETS_ARN: '{{resolve:ssm:ZendeskSecretSetArn}}'
      Events:
        InitiateAthenaQueryEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt InitiateAthenaQueryQueue.Arn
            BatchSize: 1
      FunctionName: !Sub ${AWS::StackName}-initiate-athena-query
      KmsKeyArn: '{{resolve:ssm:LambdaKmsKeyArn}}'
      Policies:
        - Statement:
            - Sid: GetGlueTables
              Effect: Allow
              Action:
                - glue:GetTable
              Resource:
                - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:catalog
                - '{{resolve:ssm:AuditDataAnalysisGlueDatabaseArn}}'
                - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:table/{{resolve:ssm:AuditDataAnalysisGlueDatabaseName}}/${AuditAnalysisTable}
            - Sid: StartAthenaQuery
              Effect: Allow
              Action:
                - athena:StartQueryExecution
              Resource: '{{resolve:ssm:TicfAutomatedDataQueriesWorkgroupArn}}'
            - Sid: ReadFromAnalysisBucket
              Effect: Allow
              Action:
                - s3:ListBucket
                - s3:GetObject
              Resource:
                - !GetAtt AnalysisBucket.Arn
                - !Sub ${AnalysisBucket.Arn}/*
            - Sid: WriteToResultsBucket
              Effect: Allow
              Action:
                - s3:GetBucketLocation
                - s3:GetObject
                - s3:ListBucket
                - s3:ListBucketMultipartUploads
                - s3:ListMultipartUploadParts
                - s3:AbortMultipartUpload
                - s3:PutObject
              Resource:
                - '{{resolve:ssm:AthenaQueryOutputBucketArn}}'
                - '{{resolve:ssm:AthenaQueryOutputBucketArn}}/*'
            - Sid: Logs
              Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !GetAtt InitiateAthenaQueryLogs.Arn
            - Sid: ReadSecrets
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: '{{resolve:ssm:ZendeskSecretSetArn}}'
            - Sid: DecryptKmsKeys
              Effect: Allow
              Action:
                - kms:Decrypt
              Resource:
                - '{{resolve:ssm:DatabaseKmsKeyArn}}'
                - '{{resolve:ssm:SecretsKmsKeyArn}}'
                - '{{resolve:ssm:SqsKmsKeyArn}}'
            - Sid: QueryRequestTableReadWrite
              Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:GetItem
                - dynamodb:UpdateItem
              Resource: '{{resolve:ssm:QueryRequestTableArn}}'
            - Sid: AthenaOutputEncryptKmsKey
              Effect: Allow
              Action:
                - kms:GenerateDataKey
                - kms:Encrypt
                - kms:Decrypt
              Resource: '{{resolve:ssm:AthenaQueryOutputBucketKmsKeyArn}}'
            - Sid: Events
              Effect: Allow
              Action:
                - events:PutEvents
              Resource:
                - '*'
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt InitiateAthenaQueryDeadLetterQueue.Arn

  InitiateAthenaQueryLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: '{{resolve:ssm:LogsKmsKeyArn}}'
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-initiate-athena-query'
      RetentionInDays: 30

  InitiateAthenaQueryCslsSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: CslsEgress
    Properties:
      LogGroupName: !Ref InitiateAthenaQueryLogs
      FilterPattern: ''
      DestinationArn: '{{resolve:ssm:CSLSLogsDestination}}'

  SendQueryResultsNotificationFunction:
    #checkov:skip=CKV_AWS_115:Defined in Globals section
    #checkov:skip=CKV_AWS_116:Not triggered by SQS
    #checkov:skip=CKV_AWS_117:VPC not required
    Type: AWS::Serverless::Function
    Properties:
      Handler: sendQueryResultsNotification.handler
      Environment:
        Variables:
          QUERY_REQUEST_DYNAMODB_TABLE_NAME: '{{resolve:ssm:QueryRequestTableName}}'
          QUERY_RESULTS_BUCKET_NAME: !Sub txma-qr-infra-${Environment}-query-results-bucket
          QUERY_COMPLETED_QUEUE_URL: '{{resolve:ssm:QueryCompletedQueueUrl}}'
          ZENDESK_API_SECRETS_ARN: '{{resolve:ssm:ZendeskSecretSetArn}}'
          AUDIT_DATA_REQUEST_EVENTS_QUEUE_URL: '{{resolve:ssm:AuditDataRequestEventsQueueUrl}}'
      FunctionName: !Sub ${AWS::StackName}-send-query-results-notification
      KmsKeyArn: '{{resolve:ssm:LambdaKmsKeyArn}}'
      Policies:
        - Statement:
            - Sid: WriteToResultsBucket
              Effect: Allow
              Action:
                - s3:AbortMultipartUpload
                - s3:GetBucketLocation
                - s3:GetObject
                - s3:ListBucket
                - s3:ListBucketMultipartUploads
                - s3:ListMultipartUploadParts
                - s3:PutObject
              Resource:
                - !Sub arn:aws:s3:::txma-qr-infra-${Environment}-query-results-bucket
                - !Sub arn:aws:s3:::txma-qr-infra-${Environment}-query-results-bucket/*
            - Sid: DecryptKmsKeys
              Effect: Allow
              Action:
                - kms:Decrypt
              Resource:
                - '{{resolve:ssm:DatabaseKmsKeyArn}}'
                - '{{resolve:ssm:SecretsKmsKeyArn}}'
                - '{{resolve:ssm:SqsKmsKeyArn}}'
            - Sid: Logs
              Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !GetAtt SendQueryResultsNotificationLogs.Arn
            - Sid: SecretsManager
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: '{{resolve:ssm:ZendeskSecretSetArn}}'
            - Sid: QueryRequestTableReadWrite
              Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:GetItem
                - dynamodb:UpdateItem
                - dynamodb:Query
              Resource:
                - '{{resolve:ssm:QueryRequestTableArn}}'
                - '{{resolve:ssm:QueryRequestTableArn}}/index/athenaQueryIdIndex'
            - Sid: AllowSqsSend
              Effect: Allow
              Action:
                - sqs:SendMessage
              Resource:
                - '{{resolve:ssm:QueryCompletedQueueArn}}'
                - '{{resolve:ssm:AuditDataRequestEventsQueueArn}}'
            - Sid: UseSqsKmsKey
              Effect: Allow
              Action:
                - kms:Decrypt
                - kms:GenerateDataKey*
                - kms:ReEncrypt*
              Resource:
                - '{{resolve:ssm:QueryCompletedQueueKmsKeyArn}}'
                - '{{resolve:ssm:AuditDataRequestEventsQueueKmsKeyArn}}'

  SendQueryResultsNotificationLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: '{{resolve:ssm:LogsKmsKeyArn}}'
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-send-query-results-notification'
      RetentionInDays: 30

  SendQueryResultsNotificationCslsSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: CslsEgress
    Properties:
      LogGroupName: !Ref SendQueryResultsNotificationLogs
      FilterPattern: ''
      DestinationArn: '{{resolve:ssm:CSLSLogsDestination}}'

  CloseZendeskTicketFunction:
    #checkov:skip=CKV_AWS_115:Defined in Globals section
    #checkov:skip=CKV_AWS_116:The SQS queue itself will be responsible for its own DLQ
    #checkov:skip=CKV_AWS_117:VPC not required
    Type: AWS::Serverless::Function
    Properties:
      Handler: closeZendeskTicket.handler
      Role: !GetAtt CloseZendeskTicketFunctionRole.Arn
      Environment:
        Variables:
          ZENDESK_API_SECRETS_ARN: '{{resolve:ssm:ZendeskSecretSetArn}}'
      FunctionName: !Sub ${AWS::StackName}-close-zendesk-ticket
      KmsKeyArn: '{{resolve:ssm:LambdaKmsKeyArn}}'
      Events:
        CloseZendeskTicketEvent:
          Type: SQS
          Properties:
            Queue: !Sub 'arn:aws:sqs:${AWS::Region}:{{resolve:ssm:QueryResultsAccountNumber}}:txma-qr-infra-${Environment}-close-zendesk-ticket-queue'
            BatchSize: 1

  CloseZendeskTicketFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-${Environment}-close-zendesk-ticket-role
      PermissionsBoundary:
        !If [
          UsePermissionsBoundary,
          !Ref PermissionsBoundary,
          !Ref AWS::NoValue
        ]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowCloseZendeskActions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: Logs
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !GetAtt CloseZendeskTicketLogs.Arn
              - Sid: ReadSecrets
                Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - '{{resolve:ssm:ZendeskSecretSetArn}}'
              - Sid: AllowCloseZendeskTicketQueueRead
                Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !Sub 'arn:aws:sqs:${AWS::Region}:{{resolve:ssm:QueryResultsAccountNumber}}:txma-qr-infra-${Environment}-close-zendesk-ticket-queue'
              - Sid: DecryptKmsKeys
                Effect: Allow
                Action:
                  - kms:Decrypt
                Resource:
                  - '{{resolve:ssm:SecretsKmsKeyArn}}'
                  - !Sub 'arn:aws:kms:${AWS::Region}:{{resolve:ssm:QueryResultsAccountNumber}}:*'

  CloseZendeskTicketLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: '{{resolve:ssm:LogsKmsKeyArn}}'
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-close-zendesk-ticket'
      RetentionInDays: 30

  CloseZendeskTicketCslsSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: CslsEgress
    Properties:
      LogGroupName: !Ref CloseZendeskTicketLogs
      FilterPattern: ''
      DestinationArn: '{{resolve:ssm:CSLSLogsDestination}}'

  PermissionForAthenaEventToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SendQueryResultsNotificationFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt AthenaEBRule.Arn

  ##################
  # Athena Resources
  ##################

  AuditAnalysisTable:
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: '{{resolve:ssm:AuditDataAnalysisGlueDatabaseName}}'
      TableInput:
        Description: Table contains event message data to be analysed
        Name:
          !Join [
            '',
            [
              !Join ['', !Split ['-', !Ref AWS::StackName]],
              !Sub '_${Environment}_analysis_table'
            ]
          ]
        Parameters:
          has_encrypted_data: false
          projection.enabled: true
          projection.datetime.type: date
          projection.datetime.range: '2022/01/01,NOW'
          projection.datetime.format: 'yyyy/MM/dd'
          projection.datetime.interval: 1
          projection.datetime.interval.unit: DAYS
          storage.location.template:
            !Join ['', ['s3://', !Ref AnalysisBucket, '/firehose/${datetime}/']]
        PartitionKeys:
          - Name: datetime
            Type: string
        StorageDescriptor:
          Columns:
            - Name: event_id
              Type: string
            - Name: user_id
              Type: string
            - Name: client_id
              Type: string
            - Name: timestamp
              Type: bigint
            - Name: timestamp_formatted
              Type: string
            - Name: event_name
              Type: string
            - Name: component_id
              Type: string
            - Name: user
              Type: string
            - Name: platform
              Type: string
            - Name: restricted
              Type: string
            - Name: extensions
              Type: string
          Compressed: true
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          Location: !Sub s3://${AnalysisBucket}/firehose/
          OutputFormat: org.apache.hadoop.hive.ql.io.IgnoreKeyTextOutputFormat
          SerdeInfo:
            Parameters:
              {
                'ignore.malformed.json': true,
                'serialiazation.format': 1,
                'field.delim': ''
              }
            SerializationLibrary: org.openx.data.jsonserde.JsonSerDe
          StoredAsSubDirectories: false
        TableType: EXTERNAL_TABLE

  AthenaEBRule:
    Type: AWS::Events::Rule
    Properties:
      Description: The rule listening for Athena Status Change Events and triggering the sendQueryResultsNotification lambda
      EventPattern:
        source:
          - 'aws.athena'
        detail-type:
          - 'Athena Query State Change'
        detail:
          currentState:
            - 'SUCCEEDED'
            - 'FAILED'
            - 'CANCELLED'
      State: 'ENABLED'
      Targets:
        - Arn: !GetAtt SendQueryResultsNotificationFunction.Arn
          Id: AthenaEventTarget

  ##############
  # S3 Resources
  ##############

  AnalysisBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Sub ${AWS::StackName}-${Environment}-analysis-bucket
      LifecycleConfiguration:
        Rules:
          - Id: AnalysisCleanupRule
            Status: Enabled
            ExpirationInDays: 7
            NoncurrentVersionExpiration:
              NoncurrentDays: 1
          - !If
            - TestRoleResources
            - Id: DeleteAutoTestObjects
              Status: Enabled
              ExpirationInDays: 1
              NoncurrentVersionExpiration:
                NoncurrentDays: 1
              TagFilters:
                - Key: autoTest
                  Value: 'true'
            - !Ref AWS::NoValue
      LoggingConfiguration:
        DestinationBucketName: !Ref AnalysisLogsBucket
        LogFilePrefix: String
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  AnalysisLogsBucket:
    #checkov:skip=CKV_AWS_18:This is the logs bucket
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-${Environment}-analysis-logs
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  BatchJobsRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary:
        !If [
          UsePermissionsBoundary,
          !Ref PermissionsBoundary,
          !Ref AWS::NoValue
        ]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - batchoperations.s3.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowS3GlacierRestore
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: AllowAuditBucketRestore
                Effect: Allow
                Action:
                  - s3:RestoreObject
                Resource:
                  - '{{resolve:ssm:MessageBatchBucketTXMA2ARN}}/*'
              - Sid: AllowManifestBucketRead
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                Resource: '{{resolve:ssm:BatchJobManifestBucketArn}}/*'
        - PolicyName: AllowS3Copy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: AllowAnalysisBucketWrite
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:PutObjectTagging
                Resource: !Sub ${AnalysisBucket.Arn}/*
              - Sid: AllowAuditBucketRead
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectAcl
                  - s3:GetObjectTagging
                  - s3:ListBucket
                Resource:
                  - '{{resolve:ssm:MessageBatchBucketTXMA2ARN}}/*'
        - PolicyName: AllowDecryptOperations
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: AllowDecryptLambdaExecute
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt DecryptAndCopyFunction.Arn

  EmptyS3Buckets:
    Condition: DevEnvironment
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: '{{resolve:ssm:EmptyS3BucketsFunctionArn}}'

  ###############
  # SQS Resources
  ###############

  InitiateDataRequestQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: '{{resolve:ssm:SqsKmsKeyArn}}'
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt InitiateDataRequestDeadLetterQueue.Arn
        maxReceiveCount: 5

  InitiateDataRequestDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: '{{resolve:ssm:SqsKmsKeyArn}}'

  TerminatedJobQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: '{{resolve:ssm:SqsKmsKeyArn}}'

  InitiateAthenaQueryQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: '{{resolve:ssm:SqsKmsKeyArn}}'
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt InitiateAthenaQueryDeadLetterQueue.Arn
        maxReceiveCount: 5

  InitiateAthenaQueryDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: '{{resolve:ssm:SqsKmsKeyArn}}'

  ############################
  # Integration Test Resources
  ############################

  AnalysisBucketTestPolicy:
    Condition: TestRoleResources
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AnalysisBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: Test role S3 access
            Effect: 'Allow'
            Action:
              - s3:DeleteObject*
              - s3:GetObject*
              - s3:ListBucket
              - s3:PutObject*
            Resource:
              - !GetAtt AnalysisBucket.Arn
              - !Sub ${AnalysisBucket.Arn}/*
            Principal:
              AWS:
                - !Ref TestRoleArn
            Condition:
              Bool:
                'aws:SecureTransport': 'true'

  AuditBucketTestPolicy:
    Condition: TestRoleResources
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: '{{resolve:ssm:MessageBatchBucketTXMA2Name}}'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: Test role S3 access
            Effect: 'Allow'
            Action:
              - s3:DeleteObject*
              - s3:GetObject*
              - s3:ListBucket
              - s3:PutObject*
            Resource:
              - '{{resolve:ssm:MessageBatchBucketTXMA2ARN}}'
              - '{{resolve:ssm:MessageBatchBucketTXMA2ARN}}/*'
            Principal:
              AWS:
                - !Ref TestRoleArn
            Condition:
              Bool:
                'aws:SecureTransport': 'true'

  DynamoOperationsLambdaPolicy:
    Condition: TestRoleResources
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt IntegrationTestsDynamoOperationsFunctionNameParameter.Value
      Principal: !Ref TestRoleArn

  InitiateAthenaQueryQueuePolicy:
    Condition: TestRoleResources
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Sid: Allow test role send message
            Action:
              - sqs:SendMessage
            Effect: Allow
            Resource: !GetAtt InitiateAthenaQueryQueue.Arn
            Principal:
              AWS:
                - !Ref TestRoleArn
      Queues:
        - !Ref InitiateAthenaQueryQueue

  IntegrationTestsAuditBucketNameParameter:
    Condition: TestEnvironment
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /tests/${AWS::StackName}/AuditBucketName
      Type: String
      Value: '{{resolve:ssm:MessageBatchBucketTXMA2Name}}'

  IntegrationTestsAuditRequestTableNameParameter:
    Condition: TestEnvironment
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /tests/${AWS::StackName}/QueryRequestTableName
      Type: String
      Value: '{{resolve:ssm:QueryRequestTableName}}'

  IntegrationTestsDynamoOperationsFunctionNameParameter:
    Condition: TestEnvironment
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /tests/${AWS::StackName}/DynamoOperationsFunctionName
      Type: String
      Value: '{{resolve:ssm:/tests/DynamoOperationsFunctionName}}'

  IntegrationTestsSqsOperationsFunctionNameParameter:
    Condition: TestEnvironment
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /tests/${AWS::StackName}/SqsOperationsFunctionName
      Type: String
      Value: '{{resolve:ssm:/tests/SqsOperationsFunctionName}}'

  IntegrationTestDataBucketNameParameter:
    Condition: TestEnvironment
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /tests/${AWS::StackName}/IntegrationTestDataBucketName
      Type: String
      Value: '{{resolve:ssm:/tests/IntegrationTestDataBucketName}}'

  IntegrationTestDataBucketArnParameter:
    Condition: TestEnvironment
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /tests/${AWS::StackName}/IntegrationTestDataBucketArn
      Type: String
      Value: '{{resolve:ssm:/tests/IntegrationTestDataBucketArn}}'

  IntegrationTestsNotifySecretSet:
    Condition: TestEnvironment
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub tests/${AWS::StackName}/NotifySecrets
      KmsKeyId: '{{resolve:ssm:SecretsKmsKeyArn}}'

  IntegrationTestsZendeskecretSet:
    Condition: TestEnvironment
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub tests/${AWS::StackName}/ZendeskSecrets
      KmsKeyId: '{{resolve:ssm:SecretsKmsKeyArn}}'

  SqsOperationsLambdaPolicy:
    Condition: TestRoleResources
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt IntegrationTestsSqsOperationsFunctionNameParameter.Value
      Principal: !Ref TestRoleArn

  TestDataBucketTestPolicy:
    Condition: TestRoleResources
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !GetAtt IntegrationTestDataBucketNameParameter.Value
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: Test role S3 access
            Effect: 'Allow'
            Action:
              - s3:GetObject*
              - s3:ListBucket
            Resource:
              - !GetAtt IntegrationTestDataBucketArnParameter.Value
              - !Sub ${IntegrationTestDataBucketArnParameter.Value}/*
            Principal:
              AWS:
                - !Ref TestRoleArn
            Condition:
              Bool:
                'aws:SecureTransport': 'true'

Outputs:
  AnalysisBucketName:
    Value: !Ref AnalysisBucket
  InitiateAthenaQueryQueueUrl:
    Value: !Ref InitiateAthenaQueryQueue
  InitiateAthenaQueryLambdaLogGroupName:
    Value: !Ref InitiateAthenaQueryLogs
  InitiateDataRequestLambdaLogGroupName:
    Value: !Ref InitiateDataRequestLogs
  ProcessDataRequestLambdaLogGroupName:
    Value: !Ref ProcessDataRequestLogs
  ZendeskWebhookApiUrl:
    Value:
      !If [
        ApiCustomDomain,
        'https://{{resolve:ssm:ZendeskWebhookApiDomainName}}',
        !Sub 'https://${ZendeskWebhookApi}.execute-api.${AWS::Region}.amazonaws.com/${ZendeskWebhookApi.Stage}'
      ]
